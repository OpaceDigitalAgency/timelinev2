---
import Layout from '../../../layouts/Layout.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import TimelineFilters from '../../../components/TimelineFilters.astro';
import HorizontalTimeline from '../../../components/HorizontalTimeline';
import { fetchReligions, fetchEras, countReligions } from '../../../lib/services/religionService';
import { ZoomIn, ZoomOut, RefreshCw } from 'lucide-react';

export async function getStaticPaths() {
  // Fetch eras for basic path generation
  const eras = await fetchEras();
  const religions = await fetchReligions();
  
  // Get all unique values for filters
  const eraNames = [...new Set(eras.map(era => era.name.toLowerCase().replace(/\s+/g, '-')))];
  const beliefSystems = [...new Set(religions.flatMap(r => r.beliefs || []).map(b => b.toLowerCase().replace(/\s+/g, '-')))];
  const continents = [...new Set(religions.map(r => r.continent?.toLowerCase().replace(/\s+/g, '-')).filter(Boolean))];
  const statuses = [...new Set(religions.map(r => r.status?.toLowerCase()).filter(Boolean))];
  
  // Generate paths for common filter combinations
  const paths = [];
  
  // Add paths for each era
  eraNames.forEach(era => {
    paths.push({ params: { filterString: era } });
  });
  
  // Add paths for each belief system
  beliefSystems.forEach(belief => {
    paths.push({ params: { filterString: belief } });
  });
  
  // Add paths for each continent
  continents.forEach(continent => {
    paths.push({ params: { filterString: continent } });
  });
  
  // Add paths for each status
  statuses.forEach(status => {
    paths.push({ params: { filterString: status } });
  });
  
  // Add some common combinations
  if (eraNames.includes('prehistoric') && beliefSystems.includes('animism')) {
    paths.push({ params: { filterString: 'prehistoric-animism' } });
  }
  
  if (eraNames.includes('classical') && beliefSystems.includes('polytheism')) {
    paths.push({ params: { filterString: 'classical-polytheism' } });
  }
  
  if (beliefSystems.includes('monotheism') && continents.includes('asia')) {
    paths.push({ params: { filterString: 'monotheism-asia' } });
  }
  
  return paths;
}

// Get the filter string from the URL
const { filterString } = Astro.params;

// Get all data
const allReligions = await fetchReligions();
const allEras = await fetchEras();
const totalCount = await countReligions();

// Parse the filter string into filter categories
function parseFilterString(str) {
  if (!str) return { eras: [], continents: [], beliefs: [], statuses: [] };
  
  const filterObj = {
    eras: [],
    continents: [],
    beliefs: [],
    statuses: [],
  };
  
  // Convert era names to IDs
  const eraMap = new Map(allEras.map(era => [
    era.name.toLowerCase().replace(/\s+/g, '-'), 
    era.id
  ]));
  
  // Get all possible values
  const allBeliefs = [...new Set(allReligions.flatMap(r => r.beliefs || []).map(b => b.toLowerCase().replace(/\s+/g, '-')))];
  const allContinents = [...new Set(allReligions.map(r => r.continent?.toLowerCase().replace(/\s+/g, '-')).filter(Boolean))];
  const allStatuses = [...new Set(allReligions.map(r => r.status?.toLowerCase()).filter(Boolean))];
  
  // Split the filter string by hyphens
  const parts = str.split('-');
  
  // Check each part against possible values
  parts.forEach(part => {
    // Check if it's an era
    for (const [eraName, eraId] of eraMap.entries()) {
      if (eraName.includes(part) || part.includes(eraName)) {
        filterObj.eras.push(eraId);
        return;
      }
    }
    
    // Check if it's a belief
    for (const belief of allBeliefs) {
      if (belief.includes(part) || part.includes(belief)) {
        filterObj.beliefs.push(belief);
        return;
      }
    }
    
    // Check if it's a continent
    for (const continent of allContinents) {
      if (continent.includes(part) || part.includes(continent)) {
        filterObj.continents.push(continent);
        return;
      }
    }
    
    // Check if it's a status
    for (const status of allStatuses) {
      if (status.includes(part) || part.includes(status)) {
        filterObj.statuses.push(status);
        return;
      }
    }
  });
  
  return filterObj;
}

const activeFilters = parseFilterString(filterString);

// Filter religions based on activeFilters
function religionMatchesFilters(religion, filters) {
  // Check each filter type
  if (filters.eras.length > 0) {
    const match = filters.eras.includes(String(religion.era));
    if (!match) return false;
  }
  
  if (filters.continents.length > 0) {
    const match = filters.continents.some(c => {
      const religionContinent = religion.continent?.toLowerCase().replace(/\s+/g, '-');
      return religionContinent?.includes(c) || c.includes(religionContinent);
    });
    if (!match) return false;
  }
  
  if (filters.beliefs.length > 0) {
    const match = filters.beliefs.some(b => {
      return religion.beliefs?.some(belief => {
        const beliefSlug = belief.toLowerCase().replace(/\s+/g, '-');
        return beliefSlug.includes(b) || b.includes(beliefSlug);
      });
    });
    if (!match) return false;
  }
  
  if (filters.statuses.length > 0) {
    const match = filters.statuses.includes(religion.status);
    if (!match) return false;
  }
  
  return true;
}

const religions = allReligions.filter(r => religionMatchesFilters(r, activeFilters));

// SEO meta/canonical
function filtersToTitle(filterString) {
  if (!filterString) return 'Timeline';
  
  // Convert hyphens to spaces and capitalize each word
  return filterString.split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ') + ' - Religious Timeline';
}

const pageTitle = filtersToTitle(filterString);
const canonicalUrl = new URL(`/timeline/filter/${filterString || ''}`, Astro.site || 'https://evolution-of-religion.netlify.app').href;
---

<Layout title={pageTitle}>
  <head>
    <link rel="canonical" href={canonicalUrl} />
    <meta name="description" content={pageTitle} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:url" content={canonicalUrl} />
  </head>
  <Header />
  
  <div class="min-h-screen flex flex-col">
    <div class="container mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-2">The Evolution of Religious Beliefs</h1>
      <p class="text-lg text-gray-600 max-w-3xl mb-2">
        Explore how religious beliefs have evolved, connected, and diverged throughout human history with our interactive timeline.
      </p>
      <div class="text-sm text-gray-600 mb-4">
        <p>This horizontal timeline visualization presents a chronological view of religious traditions from prehistory to modern times.</p>
        <p>Each node represents a distinct religious tradition, with colors indicating whether the religion is active, extinct, or evolved into newer forms.</p>
        <p>Connections between nodes show historical relationships and influences between different religious traditions.</p>
      </div>
      <p class="text-sm text-gray-500 mb-6">
        Showing {religions.length} of {totalCount} total religions in the database.
      </p>
    </div>
    
    <TimelineFilters currentView="horizontal" />
    
    <main class="flex-grow">
      <div class="container mx-auto px-4 py-4">
        <!-- Timeline Controls -->
        <div class="flex justify-end mb-4">
          <div class="flex space-x-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm p-1">
            <button id="zoom-in-btn" class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="Zoom In">
              <ZoomIn className="h-5 w-5 text-gray-700 dark:text-gray-300" />
            </button>
            <button id="zoom-out-btn" class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="Zoom Out">
              <ZoomOut className="h-5 w-5 text-gray-700 dark:text-gray-300" />
            </button>
            <button id="refresh-timeline-btn" class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="Refresh Timeline">
              <RefreshCw className="h-5 w-5 text-gray-700 dark:text-gray-300" />
            </button>
          </div>
        </div>
        
        <!-- Horizontal Timeline View -->
        <div id="timeline-container" class="mt-4">
          <div id="horizontal-view">
            <HorizontalTimeline client:only="react" religions={religions} eras={allEras} />
            <div class="sr-only">
              <h2>Timeline of Religious Traditions</h2>
              <ul>
                {religions.map(religion => {
                  return (
                    <li>
                      <h3>{religion.name} ({religion.foundingYear < 0 ? Math.abs(religion.foundingYear) + ' BCE' : religion.foundingYear + ' CE'})</h3>
                      <p>{religion.summary}</p>
                      {religion.beliefs && religion.beliefs.length > 0 && (
                        <div>
                          <h4>Key Beliefs:</h4>
                          <ul>
                            {religion.beliefs.map(belief => (
                              <li>{belief}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      <a href={`/religions/${religion.id}`}>View details about {religion.name}</a>
                    </li>
                  );
                })}
              </ul>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <Footer />
</Layout>

<script>
  // Timeline zoom and refresh controls
  const zoomInBtn = document.getElementById('zoom-in-btn');
  const zoomOutBtn = document.getElementById('zoom-out-btn');
  const refreshTimelineBtn = document.getElementById('refresh-timeline-btn');
  
  if (zoomInBtn) {
    zoomInBtn.addEventListener('click', () => {
      document.dispatchEvent(new CustomEvent('timeline-zoom', { detail: 'in' }));
    });
  }
  
  if (zoomOutBtn) {
    zoomOutBtn.addEventListener('click', () => {
      document.dispatchEvent(new CustomEvent('timeline-zoom', { detail: 'out' }));
    });
  }
  
  if (refreshTimelineBtn) {
    refreshTimelineBtn.addEventListener('click', () => {
      refreshTimelineBtn.classList.add('animate-spin');
      document.dispatchEvent(new CustomEvent('timeline-refresh'));
      
      // Remove spinning animation after a delay
      setTimeout(() => {
        refreshTimelineBtn.classList.remove('animate-spin');
      }, 1000);
    });
  }
</script>