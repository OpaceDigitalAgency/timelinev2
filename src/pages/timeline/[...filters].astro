---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import TimelineFilters from '../../components/TimelineFilters.astro';
import HorizontalTimeline from '../../components/HorizontalTimeline';
import { fetchReligions, fetchEras, countReligions } from '../../lib/services/religionService';
import type { BeliefSystem } from '../../types';

// For SSG, we'll generate a minimal set of static paths
// The rest will be handled by SSR in hybrid mode
export async function getStaticPaths() {
  // Fetch eras for basic path generation
  const eras = await fetchEras();
  
  // Start with the base path (no filters)
  const paths = [{ params: { filters: undefined } }];
  
  // Add some common filter combinations
  // These will be pre-rendered at build time
  paths.push({ params: { filters: 'era/prehistoric' } });
  paths.push({ params: { filters: 'belief/monotheism' } });
  paths.push({ params: { filters: 'continent/asia' } });
  paths.push({ params: { filters: 'status/active' } });
  
  return paths;
}

const { filters } = Astro.params;

// Helper: Parse filters from URL path segments
function parseFilters(filtersPath) {
  const filterObj = {
    eras: [],
    continents: [],
    beliefs: [],
    statuses: [],
  };
  
  if (!filtersPath) return filterObj;
  
  // Split by slash and process pairs
  const segments = filtersPath.split('/').filter(Boolean);
  
  for (let i = 0; i < segments.length; i += 2) {
    const key = segments[i];
    const value = segments[i + 1];
    
    if (!value) break;
    
    switch (key) {
      case 'era':
        filterObj.eras.push(value);
        break;
      case 'continent':
        filterObj.continents.push(decodeURIComponent(value));
        break;
      case 'belief':
        filterObj.beliefs.push(decodeURIComponent(value));
        break;
      case 'status':
        filterObj.statuses.push(value);
        break;
    }
  }
  
  return filterObj;
}

const activeFilters = parseFilters(filters);

// Fetch data
const allEras = await fetchEras();
const allReligions = await fetchReligions();
const totalCount = await countReligions();

// Filter religions based on activeFilters
function religionMatchesFilters(religion, filters) {
  // Check each filter type
  if (filters.eras.length > 0) {
    const match = filters.eras.includes(String(religion.era));
    if (!match) return false;
  }
  
  if (filters.continents.length > 0) {
    const match = filters.continents.some(c =>
      religion.continent?.toLowerCase().includes(c.toLowerCase()) ||
      religion.originCountry?.toLowerCase().includes(c.toLowerCase())
    );
    if (!match) return false;
  }
  
  if (filters.beliefs.length > 0) {
    const match = filters.beliefs.some(b =>
      religion.beliefs?.some(belief => belief.toLowerCase().includes(b.toLowerCase()))
    );
    if (!match) return false;
  }
  
  if (filters.statuses.length > 0) {
    const match = filters.statuses.includes(religion.status);
    if (!match) return false;
  }
  
  return true;
}

const filteredReligions = allReligions.filter(r => religionMatchesFilters(r, activeFilters));

// SEO meta/canonical
function filtersToTitle(filters) {
  let parts = [];
  if (filters.eras.length) parts.push('Era: ' + filters.eras.join(', '));
  if (filters.continents.length) parts.push('Continent: ' + filters.continents.join(', '));
  if (filters.beliefs.length) parts.push('Belief: ' + filters.beliefs.join(', '));
  if (filters.statuses.length) parts.push('Status: ' + filters.statuses.join(', '));
  return parts.length ? parts.join(' | ') : 'Timeline';
}

const pageTitle = filtersToTitle(activeFilters) + ' - Religious Timeline';
const canonicalUrl = new URL(filters ? `/timeline/${filters}` : '/timeline', Astro.site || 'https://evolution-of-religion.netlify.app').href;
---

<Layout title={pageTitle}>
  <head>
    <link rel="canonical" href={canonicalUrl} />
    <meta name="description" content={pageTitle} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:url" content={canonicalUrl} />
  </head>
  <Header />

  <div class="min-h-screen flex flex-col">
    <div class="container mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-2">The Evolution of Religious Beliefs</h1>
      <p class="text-lg text-gray-600 max-w-3xl mb-2">
        Explore how religious beliefs have evolved, connected, and diverged throughout human history with our interactive timeline.
      </p>
      <div class="text-sm text-gray-600 mb-4">
        <p>This horizontal timeline visualization presents a chronological view of religious traditions from prehistory to modern times.</p>
        <p>Each node represents a distinct religious tradition, with colors indicating whether the religion is active, extinct, or evolved into newer forms.</p>
        <p>Connections between nodes show historical relationships and influences between different religious traditions.</p>
      </div>
      <p class="text-sm text-gray-500 mb-6">
        Showing {filteredReligions.length} of {totalCount} total religions in the database.
      </p>
    </div>

    <TimelineFilters currentView="horizontal" />

    <main class="flex-grow">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-end mb-4">
          <!-- Timeline controls could go here if needed -->
        </div>
        <div id="timeline-container" class="mt-4">
          <div id="horizontal-view">
            <HorizontalTimeline client:only="react" religions={filteredReligions} eras={allEras} />
            <div class="sr-only">
              <h2>Timeline of Religious Traditions</h2>
              <ul>
                {filteredReligions.map(religion => {
                  return (
                    <li>
                      <h3>{religion.name} ({religion.foundingYear < 0 ? Math.abs(religion.foundingYear) + ' BCE' : religion.foundingYear + ' CE'})</h3>
                      <p>{religion.summary}</p>
                      {religion.beliefs && religion.beliefs.length > 0 && (
                        <div>
                          <h4>Key Beliefs:</h4>
                          <ul>
                            {religion.beliefs.map(belief => (
                              <li>{belief}</li>
                            ))}
                          </ul>
                        </div>
                      )}
                      <a href={`/religions/${religion.id}`}>View details about {religion.name}</a>
                    </li>
                  );
                })}
              </ul>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <Footer />
</Layout>