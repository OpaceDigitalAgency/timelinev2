---
import Layout from '../../../layouts/Layout.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import TimelineFilters from '../../../components/TimelineFilters.astro';
import VerticalTimeline from '../../../components/VerticalTimeline';
import { fetchReligions, fetchEras, countReligions } from '../../../lib/services/religionService';
import { ZoomIn, ZoomOut, RefreshCw } from 'lucide-react';

export function getStaticPaths() {
  return [
    { params: { params: undefined } },
    // We'll generate the rest dynamically
  ];
}

// Get the filter parameters from the URL
const { params } = Astro.params;

// Parse the filter parameters
function parseFilterParams(paramsString) {
  const filterObj = {
    eras: [],
    continents: [],
    beliefs: [],
    statuses: [],
  };
  
  if (!paramsString) return filterObj;
  
  // Split by slash and process segments
  const segments = paramsString.split('/').filter(Boolean);
  
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    const [type, value] = segment.split('-');
    
    if (!value) continue;
    
    switch (type) {
      case 'era':
        filterObj.eras.push(value);
        break;
      case 'continent':
        filterObj.continents.push(decodeURIComponent(value));
        break;
      case 'belief':
        filterObj.beliefs.push(decodeURIComponent(value));
        break;
      case 'status':
        filterObj.statuses.push(value);
        break;
    }
  }
  
  return filterObj;
}

const activeFilters = parseFilterParams(params);

// Get religions and eras data
const allReligions = await fetchReligions();
const eras = await fetchEras();
const totalCount = await countReligions();

// Filter religions based on activeFilters
function religionMatchesFilters(religion, filters) {
  // Check each filter type
  if (filters.eras.length > 0) {
    const match = filters.eras.includes(String(religion.era));
    if (!match) return false;
  }
  
  if (filters.continents.length > 0) {
    const match = filters.continents.some(c =>
      religion.continent?.toLowerCase().includes(c.toLowerCase()) ||
      religion.originCountry?.toLowerCase().includes(c.toLowerCase())
    );
    if (!match) return false;
  }
  
  if (filters.beliefs.length > 0) {
    const match = filters.beliefs.some(b =>
      religion.beliefs?.some(belief => belief.toLowerCase().includes(b.toLowerCase()))
    );
    if (!match) return false;
  }
  
  if (filters.statuses.length > 0) {
    const match = filters.statuses.includes(religion.status);
    if (!match) return false;
  }
  
  return true;
}

const religions = allReligions.filter(r => religionMatchesFilters(r, activeFilters));

// Helper function to format year display
const formatYear = (year: number) => year < 0 ? `${Math.abs(year)} BCE` : `${year} CE`;

// Helper function to get religions for an era
const getReligionsForEra = (era: any) => {
  return religions.filter(religion =>
    religion.foundingYear >= era.startYear &&
    religion.foundingYear <= era.endYear
  );
};

// SEO meta/canonical
function filtersToTitle(filters) {
  let parts = [];
  if (filters.eras.length) parts.push('Era: ' + filters.eras.join(', '));
  if (filters.continents.length) parts.push('Continent: ' + filters.continents.join(', '));
  if (filters.beliefs.length) parts.push('Belief: ' + filters.beliefs.join(', '));
  if (filters.statuses.length) parts.push('Status: ' + filters.statuses.join(', '));
  return parts.length ? parts.join(' | ') : 'Vertical Timeline';
}

const pageTitle = filtersToTitle(activeFilters) + ' - Religious Timeline';
const canonicalUrl = new URL(params ? `/vertical-timeline/filter/${params}` : '/vertical-timeline', Astro.site || 'https://evolution-of-religion.netlify.app').href;
---

<Layout title={pageTitle}>
  <head>
    <link rel="canonical" href={canonicalUrl} />
    <meta name="description" content={pageTitle} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:url" content={canonicalUrl} />
  </head>
  <Header />
  
  <div class="min-h-screen flex flex-col">
    <div class="container mx-auto px-4 py-8">
      <h1 class="text-3xl font-bold mb-2">The Evolution of Religious Beliefs</h1>
      <p class="text-lg text-gray-600 max-w-3xl mb-2">
        Explore how religious beliefs have evolved, connected, and diverged throughout human history with our interactive timeline.
      </p>
      <div class="text-sm text-gray-600 mb-4">
        <p>This vertical timeline visualization presents a chronological view of religious traditions from prehistory to modern times.</p>
        <p>Each entry represents a distinct religious tradition, with colors indicating whether the religion is active, extinct, or evolved into newer forms.</p>
        <p>The timeline is organized by historical eras, making it easy to see which religions emerged during specific periods.</p>
      </div>
      <p class="text-sm text-gray-500 mb-6">
        Showing {religions.length} of {totalCount} total religions in the database.
      </p>
    </div>
    
    <TimelineFilters currentView="vertical" />
    
    <main class="flex-grow">
      <div class="container mx-auto px-4 py-4">
        <!-- Timeline Controls -->
        <div class="flex justify-end mb-4">
          <div class="flex space-x-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm p-1">
            <button id="zoom-in-btn" class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="Zoom In">
              <ZoomIn className="h-5 w-5 text-gray-700 dark:text-gray-300" />
            </button>
            <button id="zoom-out-btn" class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="Zoom Out">
              <ZoomOut className="h-5 w-5 text-gray-700 dark:text-gray-300" />
            </button>
            <button id="refresh-timeline-btn" class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" title="Refresh Timeline">
              <RefreshCw className="h-5 w-5 text-gray-700 dark:text-gray-300" />
            </button>
          </div>
        </div>
        
        <!-- Vertical Timeline View -->
        <div id="timeline-container" class="mt-4">
          <div id="vertical-view">
            <VerticalTimeline client:only="react" religions={religions} eras={eras} />
            
            <!-- SEO-friendly fallback content (hidden visually but available to search engines) -->
            <div class="sr-only">
              <h2>Timeline of Religious Traditions by Era</h2>
              <div>
                {eras.map((era) => {
                  const eraReligions = getReligionsForEra(era);
                  return eraReligions.length > 0 && (
                    <section key={`era-${era.id}`}>
                      <h3>{era.name} ({formatYear(era.startYear)} to {formatYear(era.endYear)})</h3>
                      <ul>
                        {eraReligions.map((religion) => (
                          <li key={`religion-${religion.id}`}>
                            <h4>{religion.name} ({formatYear(religion.foundingYear)})</h4>
                            <p>{religion.summary}</p>
                            {religion.beliefs?.length > 0 && (
                              <div>
                                <h5>Key Beliefs:</h5>
                                <ul>
                                  {religion.beliefs.map((belief, index) => (
                                    <li key={`belief-${religion.id}-${index}`}>{belief}</li>
                                  ))}
                                </ul>
                              </div>
                            )}
                            <a href={`/religions/${religion.id}`}>View details about {religion.name}</a>
                          </li>
                        ))}
                      </ul>
                    </section>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
  
  <div class="bg-gray-100 py-12">
    <div class="container mx-auto px-4">
      <h2 class="text-2xl font-bold mb-6 text-gray-800">Understanding the Timeline</h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div class="bg-white p-6 rounded-lg shadow-sm">
          <div class="flex items-center space-x-2 mb-3">
            <div class="w-4 h-4 rounded-full bg-green-500"></div>
            <h3 class="font-semibold">Active Religions</h3>
          </div>
          <p class="text-gray-600 text-sm">
            Religious traditions that continue to be practiced in the present day, with active communities and followers.
          </p>
        </div>
        <div class="bg-white p-6 rounded-lg shadow-sm">
          <div class="flex items-center space-x-2 mb-3">
            <div class="w-4 h-4 rounded-full bg-gray-400"></div>
            <h3 class="font-semibold">Extinct Religions</h3>
          </div>
          <p class="text-gray-600 text-sm">
            Belief systems that no longer have active practitioners, though their historical impact may still be significant.
          </p>
        </div>
        <div class="bg-white p-6 rounded-lg shadow-sm">
          <div class="flex items-center space-x-2 mb-3">
            <div class="w-4 h-4 rounded-full bg-amber-500"></div>
            <h3 class="font-semibold">Evolved Religions</h3>
          </div>
          <p class="text-gray-600 text-sm">
            Ancient beliefs that have transformed significantly into newer religious movements while maintaining some continuity.
          </p>
        </div>
      </div>
    </div>
  </div>
  
  <Footer />
</Layout>

<script>
  // Timeline zoom and refresh controls
  const zoomInBtn = document.getElementById('zoom-in-btn');
  const zoomOutBtn = document.getElementById('zoom-out-btn');
  const refreshTimelineBtn = document.getElementById('refresh-timeline-btn');
  
  if (zoomInBtn) {
    zoomInBtn.addEventListener('click', () => {
      document.dispatchEvent(new CustomEvent('timeline-zoom', { detail: 'in' }));
    });
  }
  
  if (zoomOutBtn) {
    zoomOutBtn.addEventListener('click', () => {
      document.dispatchEvent(new CustomEvent('timeline-zoom', { detail: 'out' }));
    });
  }
  
  if (refreshTimelineBtn) {
    refreshTimelineBtn.addEventListener('click', () => {
      refreshTimelineBtn.classList.add('animate-spin');
      document.dispatchEvent(new CustomEvent('timeline-refresh'));
      
      // Remove spinning animation after a delay
      setTimeout(() => {
        refreshTimelineBtn.classList.remove('animate-spin');
      }, 1000);
    });
  }
</script>