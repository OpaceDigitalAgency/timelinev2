---
import { FilterIcon, X } from 'lucide-react';
import { fetchEras, fetchReligions } from '../lib/services/religionService';

// Fetch eras for filtering
const eras = await fetchEras();
const allBeliefs = ['Monotheism', 'Polytheism', 'Nontheism', 'Pantheism', 'Dualism', 'Animism', 'Philosophical'];
const allContinents = ['Asia', 'Africa', 'Europe', 'North America', 'South America', 'Australia/Oceania', 'Middle East (West Asia)', 'East Asia', 'South Asia', 'Global'];
const allStatuses = ['active', 'extinct', 'evolved'];

interface Props {
  currentView?: 'horizontal' | 'vertical';
  initialFilters?: {
    eras: string[];
    continents: string[];
    beliefs: string[];
    statuses: string[];
  };
}

const {
  currentView = 'horizontal',
  initialFilters = { eras: [], continents: [], beliefs: [], statuses: [] }
} = Astro.props;

// Determine if this is a multi-filter view
const isMultiFilter =
  (initialFilters.eras.length + initialFilters.continents.length +
   initialFilters.beliefs.length + initialFilters.statuses.length) > 1;
---

{isMultiFilter && (
  <head slot="head">
    <meta name="robots" content="noindex, follow" />
  </head>
)}

<div class="bg-white shadow-sm sticky top-16 z-40">
  <div class="container mx-auto px-4 py-2">
    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
      <div class="flex items-center space-x-2">
        <FilterIcon className="h-4 w-4 text-gray-500" />
        <span class="text-sm font-medium text-gray-700">Filter by:</span>
      </div>
      
      <div class="flex flex-wrap gap-2 items-center">
        <div class="relative group">
          <button class="filter-pill" id="era-filter">
            Era
            <svg class="h-4 w-4 inline-block ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
          <div class="hidden absolute top-full left-0 mt-1 bg-white shadow-lg rounded-md p-2 z-10 min-w-[200px] border border-gray-200" id="era-dropdown">
            <div class="space-y-1">
              {eras.map(era => (
                <label class="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded cursor-pointer">
                  <input type="checkbox" class="rounded text-primary-600 focus:ring-primary-500" value={era.id} name="era-filter" data-era-id={era.id} />
                  <span>{era.name}</span>
                </label>
              ))}
            </div>
          </div>
        </div>
        
        <div class="relative group">
          <button class="filter-pill" id="origin-filter">
            Origin
            <svg class="h-4 w-4 inline-block ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
          <div class="hidden absolute top-full left-0 mt-1 bg-white shadow-lg rounded-md p-2 z-10 min-w-[200px] border border-gray-200" id="origin-dropdown">
            <div class="space-y-1">
              {allContinents.map(continent => (
                <label class="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded cursor-pointer">
                  <input type="checkbox" class="rounded text-primary-600 focus:ring-primary-500" value={continent} name="continent-filter" data-continent={continent} />
                  <span>{continent}</span>
                </label>
              ))}
            </div>
          </div>
        </div>
        
        <div class="relative group">
          <button class="filter-pill" id="beliefs-filter">
            Beliefs
            <svg class="h-4 w-4 inline-block ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
          <div class="hidden absolute top-full left-0 mt-1 bg-white shadow-lg rounded-md p-2 z-10 min-w-[200px] border border-gray-200" id="beliefs-dropdown">
            <div class="space-y-1">
              {allBeliefs.map(belief => (
                <label class="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded cursor-pointer">
                  <input type="checkbox" class="rounded text-primary-600 focus:ring-primary-500" value={belief.toLowerCase()} name="beliefs-filter" data-belief={belief} />
                  <span>{belief}</span>
                </label>
              ))}
            </div>
          </div>
        </div>

        <div class="relative group">
          <button class="filter-pill" id="status-filter">
            Status
            <svg class="h-4 w-4 inline-block ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
          <div class="hidden absolute top-full left-0 mt-1 bg-white shadow-lg rounded-md p-2 z-10 min-w-[200px] border border-gray-200" id="status-dropdown">
            <div class="space-y-1">
              {allStatuses.map(status => (
                <label class="flex items-center space-x-2 p-2 hover:bg-gray-100 rounded cursor-pointer">
                  <input type="checkbox" class="rounded text-primary-600 focus:ring-primary-500" value={status} name="status-filter" data-status={status} />
                  <span class="capitalize">{status}</span>
                </label>
              ))}
            </div>
          </div>
        </div>
        
        <div class="relative">
          <input 
            type="text" 
            id="search-input"
            placeholder="Search religions..." 
            class="px-3 py-1 rounded-full text-sm border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          />
        </div>
        
        <button id="clear-filters" class="filter-pill flex items-center space-x-1 bg-primary-100 text-primary-800 hover:bg-primary-200">
          <X className="h-3 w-3" />
          <span>Clear All</span>
        </button>
      </div>
      
      <!-- Active filter pills container -->
      <div class="filter-pills-container flex flex-wrap gap-1 mt-2 mb-1">
        <!-- Pills will be added here dynamically -->
      </div>
      
      <div class="flex items-center space-x-2 ml-auto">
        <span class="text-sm text-gray-700">View:</span>
        <a href="/timeline" class={`p-1 rounded border ${currentView === 'horizontal' ? 'bg-primary-100 border-primary-300' : 'bg-white hover:bg-gray-50 border-gray-300'}`} title="Horizontal Timeline">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </a>
        <a href="/vertical-timeline" class={`p-1 rounded border ${currentView === 'vertical' ? 'bg-primary-100 border-primary-300' : 'bg-white hover:bg-gray-50 border-gray-300'}`} title="Vertical Timeline">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
        </a>
      </div>
    </div>
  </div>
</div>

<script>
  // For toggling dropdowns
  const dropdownToggles = {
    'era-filter': 'era-dropdown',
    'origin-filter': 'origin-dropdown',
    'beliefs-filter': 'beliefs-dropdown',
    'status-filter': 'status-dropdown'
  };

  Object.entries(dropdownToggles).forEach(([toggleId, dropdownId]) => {
    const toggle = document.getElementById(toggleId);
    const dropdown = document.getElementById(dropdownId);

    if (toggle && dropdown) {
      toggle.addEventListener('click', (e) => {
        e.stopPropagation();
        dropdown.classList.toggle('hidden');
      });
    }
  });

  // Close dropdowns when clicking outside
  document.addEventListener('click', () => {
    Object.values(dropdownToggles).forEach(dropdownId => {
      const dropdown = document.getElementById(dropdownId);
      if (dropdown && !dropdown.classList.contains('hidden')) {
        dropdown.classList.add('hidden');
      }
    });
  });

  // --- SEO URL FILTER LOGIC ---

  // Parse filters from SEO-friendly URL path
  function getFiltersFromPath() {
    const filters = {
      eras: [],
      continents: [],
      beliefs: [],
      statuses: [],
      searchTerm: ''
    };
    
    const path = window.location.pathname;
    
    // Check if we're on a filter page
    if (!path.includes('/filter/')) {
      return filters;
    }
    
    // Extract the filter string
    const filterPart = path.split('/filter/')[1];
    if (!filterPart) {
      return filters;
    }
    
    // Get all era checkboxes to match against their labels
    const eraCheckboxes = Array.from(document.querySelectorAll('input[name="era-filter"]'));
    const eraLabels = eraCheckboxes.map(cb => {
      return {
        id: cb.value,
        name: cb.nextElementSibling?.textContent?.trim().toLowerCase().replace(/\s+/g, '-') || ''
      };
    });
    
    // Get all belief checkboxes
    const beliefCheckboxes = Array.from(document.querySelectorAll('input[name="beliefs-filter"]'));
    const beliefLabels = beliefCheckboxes.map(cb => {
      return {
        value: cb.dataset.belief,
        slug: cb.dataset.belief?.toLowerCase().replace(/\s+/g, '-') || ''
      };
    });
    
    // Get all continent checkboxes
    const continentCheckboxes = Array.from(document.querySelectorAll('input[name="continent-filter"]'));
    const continentLabels = continentCheckboxes.map(cb => {
      return {
        value: cb.value,
        slug: cb.value.toLowerCase().replace(/\s+/g, '-')
      };
    });
    
    // Get all status checkboxes
    const statusCheckboxes = Array.from(document.querySelectorAll('input[name="status-filter"]'));
    const statusLabels = statusCheckboxes.map(cb => {
      return {
        value: cb.value,
        slug: cb.value.toLowerCase()
      };
    });
    
    // Split the filter string by hyphens
    const parts = filterPart.split('-');
    
    // For each part, check if it matches any of our known values
    parts.forEach(part => {
      // Check eras
      const matchingEra = eraLabels.find(era => era.name.includes(part) || part.includes(era.name));
      if (matchingEra && !filters.eras.includes(matchingEra.id)) {
        filters.eras.push(matchingEra.id);
        return;
      }
      
      // Check beliefs
      const matchingBelief = beliefLabels.find(belief => belief.slug.includes(part) || part.includes(belief.slug));
      if (matchingBelief && !filters.beliefs.includes(matchingBelief.value)) {
        filters.beliefs.push(matchingBelief.value);
        return;
      }
      
      // Check continents
      const matchingContinent = continentLabels.find(continent => continent.slug.includes(part) || part.includes(continent.slug));
      if (matchingContinent && !filters.continents.includes(matchingContinent.value)) {
        filters.continents.push(matchingContinent.value);
        return;
      }
      
      // Check statuses
      const matchingStatus = statusLabels.find(status => status.slug.includes(part) || part.includes(status.slug));
      if (matchingStatus && !filters.statuses.includes(matchingStatus.value)) {
        filters.statuses.push(matchingStatus.value);
        return;
      }
    });
    
    return filters;
  }

  // Set checkboxes based on filters from URL
  function setCheckboxesFromFilters(filters) {
    document.querySelectorAll('input[name="era-filter"]').forEach(cb => {
      cb.checked = filters.eras.includes(cb.value);
    });
    document.querySelectorAll('input[name="continent-filter"]').forEach(cb => {
      cb.checked = filters.continents.includes(cb.value);
    });
    document.querySelectorAll('input[name="beliefs-filter"]').forEach(cb => {
      cb.checked = filters.beliefs.includes(cb.value);
    });
    document.querySelectorAll('input[name="status-filter"]').forEach(cb => {
      cb.checked = filters.statuses.includes(cb.value);
    });
  }

  // Build path for filters - SEO-friendly for single filters, client-side for multi-filters
  function buildPathFromFilters(filters) {
    // Determine base path based on current view
    const basePath = window.location.pathname.includes('/vertical-timeline') ? '/vertical-timeline' : '/timeline';
    
    // If no filters, return base path
    if (
      !filters.eras.length &&
      !filters.continents.length &&
      !filters.beliefs.length &&
      !filters.statuses.length
    ) {
      return basePath;
    }
    
    // Count total filters
    const totalFilters = filters.eras.length + filters.continents.length +
                         filters.beliefs.length + filters.statuses.length;
    
    // For single filters, use SEO-friendly URLs
    if (totalFilters === 1) {
      // Era filter
      if (filters.eras.length === 1) {
        const eraName = document.querySelector(`input[name="era-filter"][value="${filters.eras[0]}"]`)
          ?.nextElementSibling?.textContent?.trim().toLowerCase().replace(/\s+/g, '-');
        if (eraName) return `/era/${eraName}/`;
      }
      
      // Continent/origin filter
      if (filters.continents.length === 1) {
        const continent = filters.continents[0].toLowerCase().replace(/\s+/g, '-').replace(/\//g, '-');
        return `/origin/${continent}/`;
      }
      
      // Belief filter
      if (filters.beliefs.length === 1) {
        const belief = filters.beliefs[0].toLowerCase().replace(/\s+/g, '-');
        return `/beliefs/${belief}/`;
      }
      
      // Status filter
      if (filters.statuses.length === 1) {
        const status = filters.statuses[0].toLowerCase();
        return `/status/${status}/`;
      }
    }
    
    // For multi-filters, use query parameters (these won't actually navigate, we'll use pushState)
    const params = new URLSearchParams();
    
    // Add era filters
    filters.eras.forEach(eraId => {
      const eraName = document.querySelector(`input[name="era-filter"][value="${eraId}"]`)
        ?.nextElementSibling?.textContent?.trim();
      if (eraName) params.append('era', eraName);
    });
    
    // Add belief filters
    filters.beliefs.forEach(b => params.append('belief', b));
    
    // Add continent filters
    filters.continents.forEach(c => params.append('continent', c));
    
    // Add status filters
    filters.statuses.forEach(s => params.append('status', s));
    
    return `${basePath}?${params.toString()}`;
  }

  // Filtering functionality
  let activeFilters = getFiltersFromPath();

  // On load, set checkboxes from URL and initialize window.initialFilters
  window.addEventListener('DOMContentLoaded', () => {
    // Set initial filters from props or URL
    activeFilters = initialFilters && Object.values(initialFilters).some(arr => arr.length > 0)
      ? { ...initialFilters, searchTerm: '' }
      : getFiltersFromPath();
    
    // Set checkboxes based on active filters
    setCheckboxesFromFilters(activeFilters);
    
    // Make filters available globally for client-side filtering
    window.initialFilters = activeFilters;
  });

  // Setup filter change handlers
  document.querySelectorAll('input[name="era-filter"]').forEach(checkbox => {
    checkbox.addEventListener('change', handleFilterChange);
  });

  document.querySelectorAll('input[name="continent-filter"]').forEach(checkbox => {
    checkbox.addEventListener('change', handleFilterChange);
  });

  document.querySelectorAll('input[name="beliefs-filter"]').forEach(checkbox => {
    checkbox.addEventListener('change', handleFilterChange);
  });

  document.querySelectorAll('input[name="status-filter"]').forEach(checkbox => {
    checkbox.addEventListener('change', handleFilterChange);
  });

  const searchInput = document.getElementById('search-input');
  if (searchInput) {
    searchInput.addEventListener('input', (e) => {
      // Search is client-only, not in URL
      activeFilters.searchTerm = e.target.value;
      // Optionally: trigger client-side filtering event here
    });
  }

  const clearFiltersBtn = document.getElementById('clear-filters');
  if (clearFiltersBtn) {
    clearFiltersBtn.addEventListener('click', clearAllFilters);
  }

  // Listen for clear-all-filters event (from timeline components)
  document.addEventListener('clear-all-filters', clearAllFilters);
  
  // Handle popstate events (browser back/forward buttons)
  window.addEventListener('popstate', (event) => {
    if (event.state && event.state.filters) {
      // Restore filters from history state
      activeFilters = event.state.filters;
      
      // Update checkboxes to match filters
      setCheckboxesFromFilters(activeFilters);
      
      // Apply client-side filtering
      applyClientSideFiltering(activeFilters);
    } else {
      // If no state, reset filters
      clearAllFilters();
    }
  });
  
  // Apply client-side filtering without page reload
  function applyClientSideFiltering(filters) {
    // Get all religions from the page
    const timelineContainer = document.getElementById('horizontal-view') ||
                             document.getElementById('vertical-view');
    
    if (!timelineContainer) return;
    
    // Dispatch a custom event that the React components can listen for
    timelineContainer.dispatchEvent(new CustomEvent('apply-filters', {
      detail: { filters },
      bubbles: true
    }));
    
    // Update filter pills to show active filters
    updateFilterPills(filters);
  }
  
  // Update filter pills to show active filters
  function updateFilterPills(filters) {
    // Clear existing active pills
    document.querySelectorAll('.active-filter-pill').forEach(pill => pill.remove());
    
    const pillsContainer = document.querySelector('.filter-pills-container');
    if (!pillsContainer) return;
    
    // Add era pills
    filters.eras.forEach(eraId => {
      const eraName = document.querySelector(`input[name="era-filter"][value="${eraId}"]`)
        ?.nextElementSibling?.textContent?.trim();
      if (eraName) addFilterPill(pillsContainer, 'era', eraName, eraId);
    });
    
    // Add continent pills
    filters.continents.forEach(continent => {
      addFilterPill(pillsContainer, 'continent', continent, continent);
    });
    
    // Add belief pills
    filters.beliefs.forEach(belief => {
      addFilterPill(pillsContainer, 'belief', belief, belief);
    });
    
    // Add status pills
    filters.statuses.forEach(status => {
      addFilterPill(pillsContainer, 'status', status, status);
    });
  }
  
  // Add a filter pill to show an active filter
  function addFilterPill(container, type, label, value) {
    const pill = document.createElement('span');
    pill.className = 'active-filter-pill inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800 mr-2 mb-2';
    pill.innerHTML = `
      ${label}
      <button type="button" class="ml-1 inline-flex items-center p-0.5 text-blue-400 hover:bg-blue-200 hover:text-blue-900 rounded-full">
        <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
        </svg>
      </button>
    `;
    
    // Add click handler to remove filter
    pill.querySelector('button').addEventListener('click', () => {
      // Remove the filter
      switch(type) {
        case 'era':
          activeFilters.eras = activeFilters.eras.filter(id => id !== value);
          document.querySelector(`input[name="era-filter"][value="${value}"]`).checked = false;
          break;
        case 'continent':
          activeFilters.continents = activeFilters.continents.filter(c => c !== value);
          document.querySelector(`input[name="continent-filter"][value="${value}"]`).checked = false;
          break;
        case 'belief':
          activeFilters.beliefs = activeFilters.beliefs.filter(b => b !== value);
          document.querySelector(`input[name="beliefs-filter"][data-belief="${value}"]`).checked = false;
          break;
        case 'status':
          activeFilters.statuses = activeFilters.statuses.filter(s => s !== value);
          document.querySelector(`input[name="status-filter"][value="${value}"]`).checked = false;
          break;
      }
      
      // Update URL and apply filters
      const newPath = buildPathFromFilters(activeFilters);
      const totalFilters = activeFilters.eras.length + activeFilters.continents.length +
                          activeFilters.beliefs.length + activeFilters.statuses.length;
      
      if (totalFilters <= 1) {
        window.location.href = newPath;
      } else {
        history.pushState({ filters: activeFilters }, '', newPath);
        applyClientSideFiltering(activeFilters);
      }
    });
    
    container.appendChild(pill);
  }

  function handleFilterChange(e) {
    const { checked, value, name } = e.target;

    switch (name) {
      case 'era-filter':
        if (checked) {
          if (!activeFilters.eras.includes(value)) activeFilters.eras.push(value);
        } else {
          activeFilters.eras = activeFilters.eras.filter(id => id !== value);
        }
        break;
      case 'continent-filter':
        if (checked) {
          if (!activeFilters.continents.includes(value)) activeFilters.continents.push(value);
        } else {
          activeFilters.continents = activeFilters.continents.filter(c => c !== value);
        }
        break;
      case 'beliefs-filter':
        if (checked) {
          if (!activeFilters.beliefs.includes(e.target.dataset.belief)) activeFilters.beliefs.push(e.target.dataset.belief);
        } else {
          activeFilters.beliefs = activeFilters.beliefs.filter(b => b !== e.target.dataset.belief);
        }
        break;
      case 'status-filter':
        if (checked) {
          if (!activeFilters.statuses.includes(value)) activeFilters.statuses.push(value);
        } else {
          activeFilters.statuses = activeFilters.statuses.filter(s => s !== value);
        }
        break;
    }

    // Update URL to reflect new filters
    const newPath = buildPathFromFilters(activeFilters);
    
    // Count total filters
    const totalFilters = activeFilters.eras.length + activeFilters.continents.length +
                         activeFilters.beliefs.length + activeFilters.statuses.length;
    
    // For single filters, navigate to SEO-friendly URL
    if (totalFilters <= 1) {
      if (window.location.pathname !== newPath) {
        window.location.href = newPath;
      }
    } else {
      // For multi-filters, use history.pushState to avoid page reload
      const url = new URL(window.location.origin + newPath);
      
      // Update the URL without reloading the page
      history.pushState({ filters: activeFilters }, '', url);
      
      // Dispatch a custom event to notify components about filter changes
      document.dispatchEvent(new CustomEvent('filters-changed', {
        detail: { filters: activeFilters }
      }));
      
      // Apply client-side filtering
      applyClientSideFiltering(activeFilters);
    }
  }

  function clearAllFilters() {
    // Uncheck all checkboxes
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
      checkbox.checked = false;
    });

    // Clear search input
    if (searchInput) {
      searchInput.value = '';
    }

    // Reset active filters
    activeFilters = {
      eras: [],
      continents: [],
      beliefs: [],
      statuses: [],
      searchTerm: ''
    };

    // Update URL to base timeline (preserving the current view)
    const basePath = window.location.pathname.includes('/vertical-timeline') ? '/vertical-timeline' : '/timeline';
    
    // Check if we're on a filter page or have query parameters
    if (window.location.pathname.includes('/filter/') ||
        window.location.pathname.match(/\/(era|origin|beliefs|status)\//) ||
        window.location.search !== '') {
      
      // Use history.pushState to avoid page reload if we're on the main timeline pages
      if (window.location.pathname.includes('/timeline') || window.location.pathname.includes('/vertical-timeline')) {
        history.pushState({ filters: activeFilters }, '', basePath);
        
        // Apply client-side filtering
        applyClientSideFiltering(activeFilters);
        
        // Dispatch a custom event to notify components about filter changes
        document.dispatchEvent(new CustomEvent('filters-changed', {
          detail: { filters: activeFilters }
        }));
      } else {
        // If we're on a different page (like a single filter page), navigate to the base timeline
        window.location.href = basePath;
      }
    }
  }
</script>

<style>
  .filter-pill {
    @apply rounded-full px-3 py-1 text-xs font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors cursor-pointer;
  }

  .filter-pill.active {
    @apply bg-primary-100 text-primary-800 hover:bg-primary-200;
  }
</style>